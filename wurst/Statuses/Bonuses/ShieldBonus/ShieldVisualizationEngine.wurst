package ShieldVisualizationEngine
import LinkedList
import ClosureTimers
import ShieldVisualizationOptions
import StringUtils

class ShieldPointsTracker
    private real currentShieldPoints = 0
    private unit target = null
    private texttag textVisualization = null

    construct(unit u, real shieldPower)
        this.target = u
        this.addShield(shieldPower)

    function getTrackedUnit() returns unit
        return this.target

    function hasAnyShieldLeft() returns bool
        return currentShieldPoints > 0 

    /**
    Add shield poinst for the tracker.
    */
    function addShield(real shieldPower)
        this.currentShieldPoints += shieldPower

    /**
    Register shield damege on the tracker.
    */
    function damageShield(real amount)
        this.currentShieldPoints -= amount

    /**
    Setsup TEXT visualization texttag.
    */
    function initTextVisualization()
        this.textVisualization = createTTEx(this.target.getPos3Zero(), "", 12)
        this.updateTextVisualization()

    /**
    Updates texttag position and text.
    */
    function updateTextVisualization()
        let text = getVisualizationString()
        this.textVisualization.center(this.target.getPos3Zero() + vec3(0, 165, 0), text, 12)

    /**
    Returns string displayed above unit when TEXT visualization is used.
    */
    private function getVisualizationString() returns string
        return "(" + this.currentShieldPoints.toInt().toString() + ")"

    ondestroy
        this.textVisualization.destr()

class ShieldVisualizationEngine
    private static LinkedList<ShieldPointsTracker> shieldTrackers = new LinkedList<ShieldPointsTracker>()
    private static ShieldVisualization visualizationOption = ShieldVisualization.TEXT
    private static int refreshRate = 60
    private static CallbackPeriodic textVisualizationCallback = null

    /**
    Sets shield bonus visualization option. Default is TEXT.
    */
    static function setVisualizationOption(ShieldVisualization option)
        ShieldVisualizationEngine.visualizationOption = option

    /**
    Sets visualization refresh rate (how many times per second). Default is 60
    */
    static function setRefrashRate(int refreshRate)
        ShieldVisualizationEngine.refreshRate = refreshRate

    /**
    Adds shield visualization for the unit.
    */
    static function addVisualizationForUnit(unit u, real shieldPower)
        if visualizationOption == ShieldVisualization.NONE
            return
        let trackersCountBeforeRegistration = shieldTrackers.size()
        setupTrackerForUnit(u, shieldPower)
        if trackersCountBeforeRegistration == 0
            initCallback()
         
    /**
    Updates visualization data based on damage done to the shield.
    If canEndTracking parameter == true, while visualization may end at this time (If there is no more shield poinst left)
    */
    static function registerShieldDamage(unit u, real damageAmount, bool canEndTracking)
        if visualizationOption == ShieldVisualization.NONE
            return
        for tracker in shieldTrackers
            if tracker.getTrackedUnit() == u
                tracker.damageShield(damageAmount)
                if canEndTracking and not tracker.hasAnyShieldLeft()
                    shieldTrackers.remove(tracker)
                    destroy tracker
                break
        if shieldTrackers.size() == 0
            if textVisualizationCallback != null
                destroy textVisualizationCallback
                textVisualizationCallback = null

    /**
    Adding shield points to be tracked.
    If tracker do not exists it will be created.
    */
    private static function setupTrackerForUnit(unit u, real shieldPower)
        for tracker in shieldTrackers
            if tracker.getTrackedUnit() == u
                tracker.addShield(shieldPower) 
                return
        shieldTrackers.add(new ShieldPointsTracker(u, shieldPower))
        initVisualizationForUnit(u)
     
    /**
    Initalizes visualization mechanism for unit.
    */
    private static function initVisualizationForUnit(unit u)
        switch visualizationOption
            case NONE
                skip
            case TEXT
                initVisualizationForUnit_TEXT(u)

    /**
    Initalizes TEXT visualization mechanism for unit.
    */
    private static function initVisualizationForUnit_TEXT(unit u)
        for tracker in shieldTrackers
            if tracker.getTrackedUnit() == u
                tracker.initTextVisualization()
                break
       
    /**
    Initializes visualization callback for the whole mechanism.
    */
    private static function initCallback()
        switch visualizationOption
            case NONE
                skip
            case TEXT
                initializeCallback_TEXT()

    /**
    Initializes TEXT visualization callback for the whole mechanism.
    */
    private static function initializeCallback_TEXT()
        ShieldVisualizationEngine.textVisualizationCallback = doPeriodically(1/refreshRate) (CallbackPeriodic cb) ->
            for shiledTracker in shieldTrackers
                shiledTracker.updateTextVisualization()