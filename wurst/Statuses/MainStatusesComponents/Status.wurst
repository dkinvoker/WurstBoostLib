package Status
import LinkedList
import StatusEffectInstance
import StatusEffect
import ClosureTimers
import BuffObjEditing
import StatusStackability
import HashMap
import initlater StatusInstance

/**
Statuses map to keep track of Status instances (used for stackability pourposes)
*/
public HashMap<unit, LinkedList<StatusInstance>> statusMap = new HashMap<unit, LinkedList<StatusInstance>>()

/**
Interface for Status event handling
*/
interface StatusEventHandler 
    abstract function handleEvent(unit statusTarget, Status status)

/**
Status is container of various effects that can be applied to certain unit
and automatically vanishes after duration time of Status.

Uses StatusEffect classes.
StatusEffect class can be inherited by your own StatusEffects to extend functionality
*/
public class Status
    private LinkedList<StatusEffect> effects = new LinkedList<StatusEffect>()
    private real duration = 1
    private buffTuple statusBuff
    private int maxStackCout = 25
    private StatusStackability stackability = StatusStackability.REAPPLY

    private StatusEventHandler onStackExpiredHandler = null
    private StatusEventHandler onStatusExpiredHandler = null
    private StatusEventHandler onStatusDispelledHandler = null

    //--------- REGION: SETTERS AND GETTERS ----------------
    function getBuff() returns buffTuple
        return this.statusBuff

    function setMaxStackCout(int maxCount)
        this.maxStackCout = maxCount
    
    /**
    Gets max amount of stacks that this Status can apply.
    If stackability is set to DO_NO_STACK or REAPPLY it will always return 1.
    If stackability is set to NO_OVERHEAD it will return INT_MIN cuz' this Status is not meant to be stacked at any way.
    */
    function getMaxStackCout() returns int
        switch this.stackability
            case DO_NOT_STACK | REAPPLY
                return 1
            case NO_OVERHEAD
                return INT_MIN
            default
                return this.maxStackCout

    /**
    Sets Status Stackability.
    REAPPLY is default.
    Statuses with the same Buff Id are treated as one in terms of stackability.
    */
    function setStackability(StatusStackability stackability)
        this.stackability = stackability

    /**
    Returns current stackability option
    */
    function getStackability() returns StatusStackability
        return this.stackability
    
    /**
    Sets Status duration.
    */
    function setDuration(real duration)
        this.duration = duration

    /**
    Sets buff that will be used when Status will be applied to the unit.
    */
    function setBuff(buffTuple bonBuff)
        this.statusBuff = bonBuff

    //------- REGION: OTHERS ----------

    /**
    Adds new effect the to Status.
    */
    function addEffect(StatusEffect statusEffect)
        this.effects.add(statusEffect)

    /**
    Returns true if unit has at least one stack of Status.
    Statuses with the same Buff Id are treated as the same Status in terms of stackability.
    */
    function isUnitUnderStatus(unit u) returns boolean
        return this.getStackCount(u) > 0 ? true : false

    /**
    Returns count of stacks that specific unit has.
    Statuses with the same Buff Id are treated as the same Bon in terms of stackability.
    */
    function getStackCount(unit u) returns int
        let instancesAttachedToUnit = this.getInstancesAttachedToUnit(u)
        if instancesAttachedToUnit == null
            return 0
        else
            let result = instancesAttachedToUnit.size()
            destroy instancesAttachedToUnit
            return result

    /**
    Removes Status from unit (all of its stacks). 
    It will trigger onDispelled Event but will not trigger onStackExpired nor onStatusExpired.
    Returns false when unit was not under Status and there was nothng to be dispelled, true otherwise.
    */
    function dispellStatus(unit u) returns boolean
        let statusCanceleResult = this.cancelStatus(u)
        if statusCanceleResult == true
            this.onStatusDispelledHandler.handleEvent(u, this)
        return statusCanceleResult

    /**
    Removes Status from unit (all of its stacks). 
    It will not trigger any Status events.
    Returns false when unit was not under Status and there was nothng to be canceled, true otherwise.
    */
    function cancelStatus(unit u) returns boolean
        let statusInstances = this.getInstancesAttachedToUnit(u)
        if statusInstances == null
            return false
        for instance in statusInstances
            instance.dispell(u)
            clearStatusInstance(u, instance)
        u.removeAbility(this.statusBuff.abilId)
        destroy statusInstances
        return true

    //------- REGION: HELPERS -----------
    /**
    Creates StatusInstance based on StatusEffectsInstances list, and inserts it to statusMap under unit u key.
    */
    private function registerStatusInstance(unit u, LinkedList<StatusEffectInstance> effects) returns StatusInstance
        if not statusMap.has(u)
            statusMap.put(u, new LinkedList<StatusInstance>())
        let result = new StatusInstance(this, effects)
        statusMap.get(u).add(result)
        return result

    /**
    Destroys StatusInstance and removes it from statusMap.
    */
    private function clearStatusInstance(unit u, StatusInstance instance)
        let unitStatuses = statusMap.get(u)..remove(instance)
        destroy instance
        if unitStatuses.size() == 0
            statusMap.remove(u)

    /**
    Applys all of StatusEffects to unit u, and returns registered StatusInstance
    */
    private function applyAllEffectsAndRegisterStatus(unit u) returns StatusInstance
        let effectsInstances = new LinkedList<StatusEffectInstance>()
        for statusEffect in this.effects
            effectsInstances.add(statusEffect.applyEffect(u))
        u.addAbility(this.statusBuff.abilId)
        return this.registerStatusInstance(u, effectsInstances)

    /**
    Gets new LinkedList that contains all instances of this Status applied to unit u.
    Status with the same buffId are considered the same Status.
    */
    private function getInstancesAttachedToUnit(unit u) returns LinkedList<StatusInstance>
        if not statusMap.has(u)
            return null
        else
            return statusMap.get(u).filter( (StatusInstance t) -> t.getStatus().statusBuff.buffId == this.statusBuff.buffId )

    //------- REGION: APPLING STATUS --------

    /**
    Handles Status appling for STACK stackability option.
    */
    private function applyToUnit_STACK(unit u)
        if this.getStackCount(u) < this.maxStackCout
            let statusInstance = this.applyAllEffectsAndRegisterStatus(u)

            let statusEndCallback = doAfter(this.duration) -> 
                if u != null
                    statusInstance.removeEffects(u)
                    clearStatusInstance(u, statusInstance)
                    this.onStackExpiredHandler.handleEvent(u, this)
                    if not this.isUnitUnderStatus(u)
                        u.removeAbility(this.statusBuff.abilId)
                        this.onStatusExpiredHandler.handleEvent(u, this)

            statusInstance.bindEndOfStatusCallback(statusEndCallback)

    /**
    Handles Status appling for DO_NOT_STACK stackability option.
    */
    private function applyToUnit_DO_NOT_STACK(unit u)
        if not this.isUnitUnderStatus(u)
            this.applyToUnit_NO_OVERHEAD(u)

    /**
    Handles Status appling for REAPPLY stackability option.
    */
    private function applyToUnit_REAPPLY(unit u)
        let instancesAttachedToUnit = this.getInstancesAttachedToUnit(u)
        if instancesAttachedToUnit != null
            for statusInstance in instancesAttachedToUnit
                statusInstance.dispell(u)
                clearStatusInstance(u, statusInstance)
            destroy instancesAttachedToUnit
        applyToUnit_NO_OVERHEAD(u)

    /**
    Handles Status appling for STACK_AND_REAPPLY stackability option.
    */
    private function applyToUnit_STACK_AND_REAPPLY(unit u)
        int countOfStacksToApply = 1
        let instancesAttachedToUnit = this.getInstancesAttachedToUnit(u)
        if instancesAttachedToUnit != null
            countOfStacksToApply += instancesAttachedToUnit.size()
            for statusInstance in instancesAttachedToUnit
                statusInstance.dispell(u)
                clearStatusInstance(u, statusInstance)
            destroy instancesAttachedToUnit
        for i = 1 to countOfStacksToApply
            this.applyToUnit_STACK(u)

    /**
    Handles Status appling for NO_OVERHEAD stackability option.
    */
    private function applyToUnit_NO_OVERHEAD(unit u)
        let statusInstance = this.applyAllEffectsAndRegisterStatus(u)

        let statusEndCallback = doAfter(this.duration) -> 
            if u != null
                statusInstance.removeEffects(u)
                clearStatusInstance(u, statusInstance)
                u.removeAbility(this.statusBuff.abilId)
                this.onStackExpiredHandler.handleEvent(u, this)
                this.onStatusExpiredHandler.handleEvent(u, this)
                    
        statusInstance.bindEndOfStatusCallback(statusEndCallback)
           

    /**
    Applys all of the Effects to the unit and sets up Buff for that unit.
    After Duration Time of the Status all effects and Buff will be removed.
    */
    function applyToUnit(unit u)
        switch this.stackability
            case STACK
                applyToUnit_STACK(u)
            case DO_NOT_STACK
                applyToUnit_DO_NOT_STACK(u)
            case REAPPLY
                applyToUnit_REAPPLY(u)
            case STACK_AND_REAPPLY
                applyToUnit_STACK_AND_REAPPLY(u)
            case NO_OVERHEAD
                applyToUnit_NO_OVERHEAD(u)

    //--------- REGION: EVENTS -----------

    /**
    Sets handler to be called after each stack expiries.
    */
    function onStackExpired(StatusEventHandler handler)
        //Clear previous event handler
        if this.onStackExpiredHandler != null
            destroy this.onStackExpiredHandler
        this.onStackExpiredHandler = handler

    /**
    Sets handler to be called after all stacks expiries.
    */
    function onStatusExpired(StatusEventHandler handler)
        //Clear previous event handler
        if this.onStatusExpiredHandler != null
            destroy this.onStatusExpiredHandler
        this.onStatusExpiredHandler = handler

    /**
    Sets handler to be called after status is dispelled.
    */
    function onStatusDispelled(StatusEventHandler handler)
        //Clear previous event handler
        if this.onStatusDispelledHandler != null
            destroy this.onStatusDispelledHandler
        this.onStatusDispelledHandler = handler

    //------ REGION: DESTRUCTOR ------        

    ondestroy
        for statusEffect in this.effects
            destroy statusEffect
        destroy this.effects
        if this.onStackExpiredHandler != null
            destroy this.onStackExpiredHandler
        if this.onStatusExpiredHandler != null
            destroy this.onStatusExpiredHandler
        if this.onStatusDispelledHandler != null
            destroy this.onStatusDispelledHandler

