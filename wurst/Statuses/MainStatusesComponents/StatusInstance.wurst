package StatusInstance

import LinkedList
import StatusEffectInstance
import Status
import ClosureTimers

public class StatusInstance
    private LinkedList<StatusEffectInstance> effects = new LinkedList<StatusEffectInstance>()
    private Status status
    private CallbackSingle endOfStatusCallback

    construct(Status status, LinkedList<StatusEffectInstance> effects)
        this.status = status
        this.effects = effects

    function getStatus() returns Status
        return this.status

    /**
    Attaches callback function that will be called after duration to this StatusInstance.
    Remember that callback will be triggered even if not binded with StatusInstance, however binding is necessary to no lose its reference, and be able to disable it if needed.
    */
    function bindEndOfStatusCallback(CallbackSingle callback)
        this.endOfStatusCallback = callback

    /**
    Remove all of StatusEffectInstances from target. 
    Do not destroy endOfStatusCallback.
    Can be ussed in endOfStatusCallback itself.
    */
    function removeEffects(unit u)
        for bonus in this.effects
            bonus.removeEffect(u)

    /**
    Remove all of StatusEffectInstances from target, and destroys endOfStatusCallback.
    Cannot be used inside endOfStatusCallback function! 
    It would destroy callback during its execution causing errors and wurst memory corruption.
    */
    function dispell(unit u)
        this.removeEffects(u)
        this.abortCallback()

    /**
    Destroys endOfStatusCallback causing it to not be fired.
    */
    function abortCallback()
        destroy this.endOfStatusCallback

    ondestroy
        this.effects.forEach() (StatusEffectInstance t) ->
            destroy t
        destroy this.effects