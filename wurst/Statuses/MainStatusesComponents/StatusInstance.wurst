package StatusInstance

import LinkedList
import StatusEffectInstance
import Status
import ClosureTimers

public class StatusInstance
    private LinkedList<StatusEffectInstance> bonuses = new LinkedList<StatusEffectInstance>()
    private Status bonEffect
    private CallbackSingle endOfBonCallback

    construct(Status bon, LinkedList<StatusEffectInstance> bonuses)
        this.bonEffect = bon
        this.bonuses = bonuses

    function getStatus() returns Status
        return this.bonEffect

    /**
    Attaches callback function that will be called after duration to this BonEffectInstance.
    Remember that callback will be triggered even if not binded with BonEffectInstance, however binding is necessary to no lose its reference, and be able to disable it if needed.
    */
    function bindEndOfStatusCallback(CallbackSingle callback)
        this.endOfBonCallback = callback

    /**
    Remove all of BonusInstances from target. 
    Do not destroy endOfBonCallback.
    Can be ussed in endOfBonCallback itself.
    */
    function removeEffects(unit u)
        for bonus in this.bonuses
            bonus.removeEffect(u)

    /**
    Remove all of BonusInstances from target, and destroys endOfBonCallback.
    Cannot be used inside endOfBonCallback function! 
    It would destroy callback during its execution causing errors and wurst memory corruption.
    */
    function dispell(unit u)
        this.removeEffects(u)
        this.abortCallback()

    /**
    Destroys endOfBonCallback causing it to not be fired.
    */
    function abortCallback()
        destroy this.endOfBonCallback

    ondestroy
        bonuses.forEach() (StatusEffectInstance t) ->
            destroy t
        destroy bonuses